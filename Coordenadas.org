#+OPTIONS: num:nil
#+TITLE:  Coordenadas
#+AUTHOR: Gabriel Petrini
#+PROPERTY:header-args R :results output drawer :eval never-export :exports both :session *coords* :tangle ./coordenadas.R
#+PROPERTY:header-args python :results output drawer :eval never-export :exports both :session *coords*
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-bigblow.setup

* Carregando pacotes e dados

** Pacotes

#+begin_src R  :tangle ./coordenadas.R :exports none
library(tidyverse)
library(tidygeocoder)
library(tabulizer)
library(geodist)
library(data.table)
library(SetMethods)
#+end_src

#+RESULTS:
:results:
â”€â”€ [1mAttaching packages[22m â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse 1.3.0 â”€â”€
[32mâœ”[39m [34mggplot2[39m 3.3.3     [32mâœ”[39m [34mpurrr  [39m 0.3.4
[32mâœ”[39m [34mtibble [39m 3.0.6     [32mâœ”[39m [34mdplyr  [39m 1.0.4
[32mâœ”[39m [34mtidyr  [39m 1.1.2     [32mâœ”[39m [34mstringr[39m 1.4.0
[32mâœ”[39m [34mreadr  [39m 1.4.0     [32mâœ”[39m [34mforcats[39m 0.5.1
â”€â”€ [1mConflicts[22m â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse_conflicts() â”€â”€
[31mâœ–[39m [34mdplyr[39m::[32mfilter()[39m masks [34mstats[39m::filter()
[31mâœ–[39m [34mdplyr[39m::[32mlag()[39m    masks [34mstats[39m::lag()
data.table 1.13.6 using 2 threads (see ?getDTthreads).  Latest news: r-datatable.com

Attaching package: â€˜data.tableâ€™

The following objects are masked from â€˜package:dplyrâ€™:

    between, first, last

The following object is masked from â€˜package:purrrâ€™:

    transpose
Carregando pacotes exigidos: QCA
Carregando pacotes exigidos: admisc

Attaching package: â€˜admiscâ€™

The following objects are masked from â€˜package:dplyrâ€™:

    compute, recode

The following objects are masked from â€˜package:purrrâ€™:

    negate, simplify

The following object is masked from â€˜package:tidyrâ€™:

    expand


To cite package QCA in publications, please use:
  Dusa, Adrian (2019) QCA with R. A Comprehensive Resource.
  Springer International Publishing.

To run the graphical user interface, use: runGUI()


Carregando pacotes exigidos: ggrepel
Carregando pacotes exigidos: stargazer

Please cite as:

 Hlavac, Marek (2018). stargazer: Well-Formatted Regression and Summary Statistics Tables.
 R package version 5.2.2. https://CRAN.R-project.org/package=stargazer



  To cite package SetMethods in publications use:

  Oana, Ioana-Elena and Carsten Q. Schneider. 2018. SetMethods: An Add-on R Package for
  Advanced QCA. The R Journal 10(1): 507-33. https://journal.r-project.org/archive/2018/RJ-2018-031/index.html
:end:



** Capitais

#+begin_src R :tangle ./coordenadas.R
capitals <-maps::world.cities %>%
  filter(capital == "1") %>%
  select(country.etc, name) %>% # long and lat will be used in osm method
  rename(pais = country.etc, capital = name) %>%
  geocode(city = capital, country = pais, method = 'osm', lat = latitude, long = longitude) %>%
  mutate(ISO3C = countrycode::countrycode(pais, origin ='country.name',destination ='iso3c', warn = FALSE))

data.table::fwrite(capitals, file = "./clean/coord_capitais.csv")
#+end_src

* Conflitos violentos

** Tabela no texto (p. 366-7)
#+CAPTION: Communist-led events
#+NAME: violentos
|------+-----------------------+-------------+----------|
| 1945 | Poland                |             | Europa   |
| 1945 | Austria               |             | Europa   |
| 1946 | North Korea           |             | Asia     |
| 1946 | China                 |             | Asia     |
| 1946 | Greece                |             | Europa   |
| 1947 | Bulgaria              |             | Europa   |
| 1948 | Czechoslovakia        | Prague      | Europa   |
| 1948 | East Germany          | Bonn        | Europa   |
| 1948 | East Germany          | Bonn        | Europa   |
| 1948 | China                 |             | Asia     |
| 1949 | China                 |             | Asia     |
| 1950 | South Korea           |             | Asia     |
| 1950 | China                 |             | Asia     |
| 1950 | North and South Korea | South Korea | Asia     |
| 1953 | East Germany          | Bonn        | Europa   |
| 1954 | Vietinam              |             | Asia     |
| 1954 | Vietinam              |             | Asia     |
| 1955 | North and South Korea | South Korea | Asia     |
| 1956 | Poland                |             | Europa   |
| 1956 | Hungary               |             | Europa   |
| 1958 | Taiwan                |             | Asia     |
| 1959 | Cuba                  |             | Americas |
| 1960 | East Germany          | Bonn        | Europa   |
| 1961 | East Germany          | Bonn        | Europa   |
| 1962 | Laos                  |             | Asia     |
| 1962 | Cuba                  |             | Americas |
| 1968 | Vietinam              |             | Asia     |
| 1968 | Czechoslovakia        | Prague      | Europa   |
| 1969 | North Korea           |             | Asia     |
| 1969 | Libya                 |             | Africa   |
| 1970 | Cambodia              |             | Asia     |
| 1975 | Cambodia              |             | Asia     |
| 1975 | Vietinam              |             | Asia     |
| 1975 | Laos                  |             | Asia     |
| 1978 | Afghanistan           |             | Asia     |
| 1979 | Nicaragua             |             | Americas |
| 1979 | El Salvador           |             | Americas |
| 1979 | Afghanistan           |             | Asia     |
| 1981 | Poland                |             | Europa   |
| 1989 | China                 |             | Asia     |
|------+-----------------------+-------------+----------|


** Importando dados

#+begin_src R :var conflicts=violentos  :tangle ./coordenadas.R

capitais <- data.table::fread(file = "./clean/coord_capitais.csv")

conflicts <- conflicts %>%
  rename(Year = V1, Country = V2, Proxy = V3, Continente = V4) %>%
  mutate(ISO3C = countrycode::countrycode(Country, origin ='country.name',destination ='iso3c', warn = FALSE)) %>%
  left_join(capitais) %>%
  mutate(pais = # Keep countries not found in dataset
           pais %>%
             is.na %>%
             ifelse(Country, pais) ) %>%
  mutate(ISO3C = replace_na(ISO3C, "404")) %>%
  mutate(Continente = factor(Continente))


## proxies <-conflicts %>% filter(ISO3C == "404") %>%
##   mutate(capital = case_when())
##   mutate(capital = Proxy) %>% # Keep countries not found in dataset
##   ## select(-c(latitude, longitude)) %>%
##   geocode(city = capital, method = 'osm', lat = latitude, long = longitude)

conflicts <- conflicts %>%
  mutate(capital = case_when(
         ISO3C == "404" ~ Proxy,
         TRUE ~ capital)) %>%
  mutate(ISO3C = case_when(
           pais == "East Germany" ~ "GERe",
           pais == "Czechoslovakia" ~ "oCZE",
           pais == "North and South Korea" ~ "PRK",
           TRUE ~ ISO3C # NÃ£o sei se faz isso, mas a ideia dessa linha Ã© manter todo o restante como antes
         )) %>%
  mutate(pais = case_when( # Atualizando nome dos paÃ­ses para preencher coordenadas faltantes
           pais == "East Germany" ~ "Germany",
           pais == "Czechoslovakia" ~ "Czech Republic",
           pais == "North and South Korea" ~ "North Korea",
           TRUE ~ pais
         )) %>%
  select(-c(latitude, longitude)) %>%
  geocode(city = capital, country = pais, method = 'osm', lat = latitude, long = longitude)
  
    
conflicts <- conflicts %>%
  mutate(latitude  = case_when(
           ISO3C == "PRK" ~ 39.032, # https://pt.db-city.com/Coreia-do-Norte--Pyongyang
           TRUE ~ as.numeric(latitude)))
conflicts <- conflicts %>%
  mutate(longitude  = case_when(
           ISO3C == "PRK" ~ 125.75, # https://pt.db-city.com/Coreia-do-Norte--Pyongyang
           TRUE ~ as.numeric(longitude)))


conflicts <- conflicts %>%
  arrange(Year) %>%
  mutate(
    name = paste0(capital, "_", Year %>% as.character() %>% str_sub(start=-2), "_", Continente)
  ) %>%
  mutate(name = str_replace_all(name, " ", ""))
    

data.table::fwrite(conflicts, file = "./clean/coord_conflitos_violentos.csv")
#+end_src

#+RESULTS:
:results:
Joining, by = "ISO3C"
:end:



** Criando dataframe vazio

#+begin_src R  :tangle ./coordenadas.R
capitais <- data.table::fread(file = "./clean/coord_capitais.csv") %>% arrange(ISO3C)
conflitos <- data.table::fread(file = "./clean/coord_conflitos_violentos.csv") %>% arrange(ISO3C)

repeticoes <- conflitos %>% group_by(name) %>% group_size() # Equivalente ao Cr do artigo (vezes que ocorreu)

df <- matrix(
  nrow = capitais$longitude %>% length(),
  ncol = conflitos$name %>% unique() %>% length()
) %>%
  as.data.frame()


names(df) <- conflitos$name %>% unique()
df$ISO <- capitais$ISO3
df <- df[,c("ISO", conflitos$name)] %>%
  arrange(ISO)
df <- df %>% pivot_longer(!ISO,names_to = "Origem")
#+end_src

#+RESULTS:
:results:
:end:








** FunÃ§Ã£o para calcular distÃ¢ncia

#+begin_src R  :tangle ./coordenadas.R
distancia <- function(method = "geodesic", Destino, Origem) {
  geodist::geodist(
    x = capitais %>% filter(ISO3C == Destino) %>% select(latitude, longitude),
    y = conflitos %>% filter(name == Origem) %>% select(latitude, longitude),
    measure = method
    ## Nfrom = col_df %>% filter(name == matrix_col) %>% select(latitude) %>% as.numeric(), # latitude of origin
    ## Efrom = col_df %>% filter(name == matrix_col) %>% select(longitude) %>% as.numeric(), # latitude of origin
    ## Nto = row_df %>% filter(ISO3C == matrix_row) %>% select(latitude) %>% as.numeric(), # latitude of origin
    ## Eto = row_df %>% filter(ISO3C == matrix_row) %>% select(longitude) %>% as.numeric(), # latitude of origin
    ## units = units
  )[1]/1000 %>% as.numeric()
}
#+end_src

#+RESULTS:
:results:
:end:

** Aplicando funÃ§Ã£o

#+begin_src R  :tangle ./coordenadas.R

## start <- sum(df$ISO == "") + 1
## for(i in start:nrow(df)){
##   for(j in 2:ncol(df)){
##     df[i,j] = distancia(
##       matrix_col = names(df)[j],
##       matrix_row = df$ISO[i]
##         )
##   }
## }

df <- data.table(df)
df[, Distancia := distancia(Origem = Origem, Destino = ISO), by = 1:nrow(df)]
df <- df %>% as.data.frame()
#+end_src

#+RESULTS:
:results:
:end:

** Exportando

#+begin_src R :tangle ./coordenadas.R

df <- df %>%
  distinct() %>%
  pivot_wider(names_from = Origem, values_from = Distancia)
    
data.table::fwrite(df, file = "./raw/distancia_geodesica.csv")
#+end_src

#+RESULTS:
:results:
:end:

** Agrupando por regiÃµes

#+begin_src R :tangle ./coordenadas.R
df <- data.table::fread("./raw/distancia_geodesica.csv") %>% select(!c(value))
df <- df %>% # Remove colunas que contÃªm apenas NA
  select(
    where(
      ~!all(is.na(.x))
    )
  )
    
continentes <- c(
  "Africa",
  "Americas",
  "Asia",
  "Europa"
    )

for(continente in continentes){
  subset <- str_subset(names(df), continente)
  df <- df %>%
    drop_na(any_of(subset)) %>%
    mutate("Violentos_{continente}" := rowMeans(across(all_of(subset))))
  
}
    
    
subset <- str_subset(names(df), "Violentos")
df <- df %>% select(ISO, all_of(subset)) %>%
    mutate("Violentos" := rowMeans(across(all_of(subset))))
#+end_src

#+RESULTS:
:results:
:end:




** Exportando

#+begin_src R  :tangle ./coordenadas.R
data.table::fwrite(df, file = "./clean/conflitos_violentos_continentes.csv")
#+end_src

#+RESULTS:
:results:
:end:


* Conflitos nÃ£o-violentos

** Tabela no texto (p. 2 (apÃªndice))
#+CAPTION: Communist-led events (non-violents)
#+NAME: nao_violentos
|------+----------------+----------+----------|
| 1945 | Czechoslovakia | Prague   | Europa   |
| 1945 | Bulgaria       |          | Europa   |
| 1945 | Yugoslavia     | Belgrade | Europa   |
| 1945 | Romania        |          | Europa   |
| 1947 | Poland         |          | Europa   |
| 1947 | Hungary        |          | Europa   |
| 1947 | Bulgaria       |          | Europa   |
| 1947 | Romania        |          | Europa   |
| 1948 | North Korea    |          | Asia     |
| 1948 | Hungary        |          | Europa   |
| 1948 | East Germany   | Bonn     | Europa   |
| 1949 | USSR           | Moscow   | Europa   |
| 1949 | North Korea    |          | Asia     |
| 1949 | East Germany   | Bonn     | Europa   |
| 1949 | China          |          | Asia     |
| 1952 | East Germany   | Bonn     | Europa   |
| 1954 | East Germany   | Bonn     | Europa   |
| 1960 | Cuba           |          | Americas |
| 1960 | Cuba           |          | Americas |
| 1970 | Chile          |          | Americas |
| 1976 | Vietinam       |          | Asia     |
| 1977 | Ethiopia       |          | Africa   |
|------+----------------+----------+----------|


** Importando dados

#+begin_src R :var conflicts=nao_violentos  :tangle ./coordenadas.R

capitais <- data.table::fread(file = "./clean/coord_capitais.csv")

conflicts <- conflicts %>%
  rename(Year = V1, Country = V2, Proxy = V3, Continente = V4) %>%
  mutate(ISO3C = countrycode::countrycode(Country, origin ='country.name',destination ='iso3c', warn = FALSE)) %>%
  left_join(capitais) %>%
  mutate(pais = # Keep countries not found in dataset
           pais %>%
             is.na %>%
             ifelse(Country, pais) ) %>%
  mutate(ISO3C = replace_na(ISO3C, "404")) %>%
  mutate(Continente = factor(Continente))



conflicts <- conflicts %>%
  mutate(capital = case_when(
         ISO3C == "404" ~ Proxy,
         TRUE ~ capital)) %>%
  mutate(ISO3C = case_when(
           pais == "East Germany" ~ "GERe",
           pais == "Czechoslovakia" ~ "oCZE",
           pais == "North and South Korea" ~ "PRK",
           pais == "Yugoslavia" ~ "YUG",
           pais == "USSR" ~ "USSR",
           TRUE ~ ISO3C # NÃ£o sei se faz isso, mas a ideia dessa linha Ã© manter todo o restante como antes
         )) %>%
  mutate(pais = case_when( # Atualizando nome dos paÃ­ses para preencher coordenadas faltantes
           pais == "East Germany" ~ "Germany",
           pais == "Czechoslovakia" ~ "Czech Republic",
           pais == "North and South Korea" ~ "North Korea",
           pais == "Yugoslavia" ~ "Serbia",
           pais == "USSR" ~ "Russia",
           TRUE ~ pais
         )) %>%
  select(-c(latitude, longitude)) %>%
  geocode(city = capital, country = pais, method = 'osm', lat = latitude, long = longitude)


conflicts <- conflicts %>%
  mutate(latitude  = case_when(
           ISO3C == "PRK" ~ 39.032, # https://pt.db-city.com/Coreia-do-Norte--Pyongyang
           TRUE ~ as.numeric(latitude)))
conflicts <- conflicts %>%
  mutate(longitude  = case_when(
           ISO3C == "PRK" ~ 125.75, # https://pt.db-city.com/Coreia-do-Norte--Pyongyang
           TRUE ~ as.numeric(longitude)))


conflicts <- conflicts %>%
  arrange(Year) %>%
  mutate(
    name = paste0(capital, "_", Year %>% as.character() %>% str_sub(start=-2), "_", Continente)
  ) %>%
  mutate(name = str_replace_all(name, " ", ""))


data.table::fwrite(conflicts, file = "./clean/coord_conflitos_nao_violentos.csv")
#+end_src

#+RESULTS:
:results:
Joining, by = "ISO3C"
:end:



** Criando dataframe vazio

#+begin_src R  :tangle ./coordenadas.R
capitais <- data.table::fread(file = "./clean/coord_capitais.csv") %>% arrange(ISO3C)
conflitos <- data.table::fread(file = "./clean/coord_conflitos_nao_violentos.csv") %>% arrange(ISO3C)

repeticoes <- conflitos %>% group_by(name) %>% group_size() # Equivalente ao Cr do artigo (vezes que ocorreu)

df <- matrix(
  nrow = capitais$longitude %>% length(),
  ncol = conflitos$name %>% unique() %>% length()
) %>%
  as.data.frame()


names(df) <- conflitos$name %>% unique()
df$ISO <- capitais$ISO3
df <- df[,c("ISO", conflitos$name)] %>%
  arrange(ISO)
df <- df %>% pivot_longer(!ISO,names_to = "Origem")
#+end_src

#+RESULTS:
:results:
:end:








** Aplicando funÃ§Ã£o

#+begin_src R  :tangle ./coordenadas.R

df <- data.table(df)
df[, Distancia := distancia(Origem = Origem, Destino = ISO), by = 1:nrow(df)]
df <- df %>% as.data.frame()
#+end_src

#+RESULTS:
:results:
:end:

** Exportando

#+begin_src R :tangle ./coordenadas.R

df <- df %>%
  distinct() %>%
  pivot_wider(names_from = Origem, values_from = Distancia)

data.table::fwrite(df, file = "./raw/distancia_geodesica_naoviolentos.csv")
#+end_src

#+RESULTS:
:results:
:end:

** Agrupando por regiÃµes

#+begin_src R :tangle ./coordenadas.R
df <- data.table::fread("./raw/distancia_geodesica_naoviolentos.csv") %>% select(!c(value))
df <- df %>% # Remove colunas que contÃªm apenas NA
  select(
    where(
      ~!all(is.na(.x))
    )
  )

continentes <- c(
  "Africa",
  "Americas",
  "Asia",
  "Europa"
    )

for(continente in continentes){
  subset <- str_subset(names(df), continente)
  df <- df %>%
    drop_na(any_of(subset)) %>%
    mutate("NaoViolentos_{continente}" := rowMeans(across(all_of(subset))))

}


subset <- str_subset(names(df), "Violentos")
df <- df %>% select(ISO, all_of(subset)) %>%
    mutate("NaoViolentos" := rowMeans(across(all_of(subset))))
#+end_src

#+RESULTS:
:results:
:end:




** Exportando

#+begin_src R  :tangle ./coordenadas.R
data.table::fwrite(df, file = "./clean/conflitos_naoviolentos_continentes.csv")
#+end_src

#+RESULTS:
:results:
:end:

* Selecionando paÃ­ses

** Importando e combinando dataframes

#+begin_src R :tangle ./coordenadas.R
data.table::fread("./clean/conflitos_violentos_continentes.csv") -> violentos
data.table::fread("./clean/conflitos_naoviolentos_continentes.csv") -> naoviolentos

df <- violentos %>%
  arrange(ISO) %>%
  left_join(naoviolentos) %>%
  arrange(ISO)
#+end_src

#+RESULTS:
:results:
Joining, by = "ISO"
:end:

** Filtrando paÃ­ses (Tabela A.1)


#+begin_src R :tangle ./coordenadas.R
paises <- c(
  "Australia",
  "Canada",
  "Denmark",
  "Finland",
  "France",
  "Germany",
  "Ireland",
  "Italy",
  "Japan",
  "Netherlands",
  "New Zealand",
  "Norway",
  "Portugal",
  "Spain",
  "Sweden",
  "Switzerland",
  "UK",
  "USA" # Ausente no original
)


ISOs <- data.table::fread(file = "./clean/coord_capitais.csv") %>%
  filter(pais %in% paises) %>%
  select(ISO3C) %>%
  rename(ISO = ISO3C)

df <- df %>%
  filter(ISO %in% ISOs$ISO %>% c())
    
    
#+end_src

#+RESULTS:
:results:
:end:




** Exportando

#+begin_src R :tangle ./coordenadas.R
data.table::fwrite(df, file = "./clean/conflitos_filtrados_n_violentos_continentes.csv")
#+end_src

#+RESULTS:
:results:
:end:

* Calculando inverso da distÃ¢ncia



#+BEGIN_latex
\begin{equation}
Cold war Event = 1000 \cdot \sum W_{j}\cdot CR_{j}
\end{equation}
#+END_latex

#+BEGIN_latex
\begin{equation}
W_{j} = dist^{-2}
\end{equation}
#+END_latex

em que dist Ã© medido em quilometros.

#+begin_src R :tangle ./coordenadas.R

data.table::fread("./clean/conflitos_filtrados_n_violentos_continentes.csv") -> df

inv_dist2 <- function(x, pow=-1){
  x^pow*10^3
}

df <- df %>%
  mutate(across(where(is.numeric), ~inv_dist2(.x)))

data.table::fwrite(df, file = "./clean/coldwar_inv2_n_violentos_selecionados.csv")
#+end_src

* Incluindo dados de distribuiÃ§Ã£o

** Script Lorena

#+begin_src R :tangle ./coordenadas.R
one_percent_income <- read.csv2("./raw/WID_Data_11042021-185939.csv")

# subseting
year <- one_percent_income[, 1, drop = FALSE]
income <- one_percent_income[, 2:19]

# cleaning data
# gsub() or nchar() as additional options
colnames(income) <- substring(colnames(income), 52)

# transforming in ISO3
colnames(income) <- countrycode(colnames(income), origin = "country.name", destination = "iso3c")

# joining subsets again
income_concentration <- cbind(year, income)

# exporting to csv
write.csv(income_concentration, "./clean/income_concentration.csv")
#+end_src


** Renomeando paÃ­ses para ISO

#+begin_src R :tangle ./coordenadas.R

inicio <- "1945"
fim <- "1989"

df <- data.table::fread(
                    './clean/income_concentration.csv',
                    header=TRUE
                    ) %>%
  select(-c(V1)) %>%
  mutate(Year = lubridate::ymd(Year, truncated = 2L)) %>%
  rename(UK = United.Kingdom, `New Zealand` = New.Zealand) %>%
  pivot_longer(!Year, names_to = "pais", values_to = "concentracao") %>%
  mutate(ISO = countrycode::countrycode(pais, origin ='country.name',destination ='iso3c', warn = FALSE)) %>%
  select(-c(pais)) %>%
  pivot_wider(names_from = ISO, values_from = concentracao) %>% # Preenchendo NAs para selecionar os primeiros
  fill(everything(), .direction = "updown") %>% # Transpondo para criar primeiro e Ãºltimo valor
  pivot_longer(-Year) %>%
  pivot_wider(names_from = Year, values_from = value) %>%
  select(name, starts_with(fim), starts_with(inicio)) %>%
  setNames(c("ISO", "Fim", "Inicio")) %>%
  mutate(Diff = (Fim - Inicio)/Inicio)

data.table::fwrite(df, paste0("./clean/diff_concentracao_", fim, "_", inicio, ".csv"))

#+end_src

#+RESULTS:
:results:
:end:



** Unindo com distÃ¢ncias

#+begin_src R :tangle ./coordenadas.R
data.table::fread(paste0("./clean/diff_concentracao_", fim, "_", inicio, ".csv")) -> concentracao
data.table::fread("./clean/coldwar_inv2_n_violentos_selecionados.csv") -> coldwar

df <- coldwar %>%
  left_join(concentracao)

data.table::fwrite(df, paste0("./clean/coldwar_concentracao_", fim, "_", inicio, ".csv"))
#+end_src

#+RESULTS:
:results:
Joining, by = "ISO"
:end:


* Unindo com dados do artigo de referÃªncia


** DicionÃ¡rio de variÃ¡veis

#+NAME: dicionario
|--------------------------------+-----------------------------------+-------------|
| Variavel                       | Descricao                         | Uso         |
|--------------------------------+-----------------------------------+-------------|
| year                           | Year                              | Input       |
| code                           | ISO code                          | Explicativa |
| cold_war_events                | Cold War Events                   | Consulta    |
| pc                             | Communist Party Share of seats    | Explicativa |
| wage_bargaining_centralization | Wage bargaining centralization    | Alternativa |
| decentralized                  | Decentralized Bargain             | Explicativa |
| union                          | Union Density                     | Explicativa |
| Left_Executive                 | Left Executive                    | Alternativa |
| polity2                        | Polity IV index (Polity2 index?)  | Explicativa |
| war_risk                       | War risk                          | Alternativa |
| cultural_distance_cw           | Cultural Distance                 | Alternativa |
| strikes                        | Labor Strikes (?)                 | Alternativa |
| top_1                          | Top 1% of income                  | Consulta    |
| top_5                          | Top 5% of income                  | Resultado   |
| top_10                         | Top 10% of income                 | Resultado   |
| gini                           | Gini                              | Resultado   |
| sstran                         | Social security transfers (% GDP) | Resultado   |
| yr_sch                         | Years of Schooling                | Resultado   |
|--------------------------------+-----------------------------------+-------------|

** Importando dados

#+begin_src R :var dicionario=dicionario  :tangle ./coordenadas.R
names(dicionario) <- as.matrix(dicionario[1, ])
dicionario <- dicionario[-1, ]
dicionario[] <- lapply(dicionario, function(x) type.convert(as.character(x)))

haven::read_dta('./raw/base_JCP_vR1_dez18.dta') -> df

df %>%
    data.table::fwrite(paste0('./clean/santanna_weller_full.csv'))
    
df <- df %>%
  filter(year >= 1945) %>%
  filter(year <= 1990) %>%
  group_by(code) %>%
  summarise(across(where(is.numeric), ~mean(.x, rm.na = TRUE))) %>%
  ungroup() %>%
  select(all_of(dicionario$Variavel)) %>%
  select(-c(year))

df %>%
    data.table::fwrite(paste0('./clean/santanna_weller_subset_media.csv'))

flags <- dicionario %>% select(Uso) %>% filter(Uso != "Input") %>% unique() %>% pull() %>% as.character()

exporter <- function(df, flag){
  dicionario %>% filter(Uso == flag) %>% select(Variavel) %>% pull() %>% as.character() -> subset
  subset <- append("code", subset)
  
  df %>%
    select(all_of(subset)) %>%
    data.table::fwrite(paste0('./clean/santanna_weller_', flag, '_media.csv'))
}

for(flag in flags){exporter(df = df, flag = flag)}

#+end_src

#+RESULTS:
:results:
:end:



** Unindo as bases

*Importante:* A base de dados de Santanna e Weller que serÃ¡ mesclada Ã© a que esta no arquivo =santanna_weller_Explicativa_medias.csv= em que estÃ£o os dados mÃ©dios.

#+begin_src R

data.table::fread(paste0("./clean/coldwar_concentracao_", fim, "_", inicio, ".csv")) -> df
data.table::fread("./clean/santanna_weller_Explicativa_media.csv") -> santanna_weller
santanna_weller <- santanna_weller %>%
  rename(ISO = code)

df <- df %>%
  left_join(santanna_weller)

data.table::fwrite(df, './clean/coldwar_concentracao_santanna_weller.csv')
    
#+end_src

#+RESULTS:
:results:
Joining, by = "ISO"
:end:


* Calibragem

** Calibrando conflitos

Os conflitos serÃ£o calibrados de acordo com o mÃ©todo indireto.
Para evitar a sensibilidade da amostra, transpÃµe-se o dataframe.
Desse modo, as Ã¢ncoras qualitativas serÃ£o associadas aos paÃ­ses e nÃ£o as continentes que os conflitos ocorreram.

#+begin_src R

data.table::fread('./clean/coldwar_concentracao_santanna_weller.csv') %>% as.data.frame() -> df

tmp <- df %>%
  select(
    ISO,
    Violentos_Europa, NaoViolentos_Europa,
    Violentos_Asia, NaoViolentos_Asia,
    Violentos_Africa, NaoViolentos_Africa,
    Violentos_Americas, NaoViolentos_Americas,
    Violentos, NaoViolentos
  ) %>%
  rename_with(.cols = -ISO, .fn = ~ paste0(.x, "_cal")) %>%
   pivot_longer(-ISO) %>%
   pivot_wider(names_from=ISO, values_from=value)

for(country in names(tmp)[-1]){
  new_name <- paste0(country, "_cal")
  x <- tmp[country] %>% as.vector() %>% t()
  # Find quantiles
  quant <- quantile(x, probs = seq(0, 1, 0.2))

  # Theoretical calibration
  x_cal <- NA
  x_cal[x <= quant[1]] <- 0
  x_cal[x > quant[1] & x <= quant[2]] <- .2
  x_cal[x > quant[2] & x <= quant[3]] <- .4
  x_cal[x > quant[3] & x <= quant[4]] <- .6
  x_cal[x > quant[4] & x <= quant[5]] <- .8
  x_cal[x > quant[5]] <- 1

  tmp[country] <- indirectCalibration(x %>% as.vector(), x_cal, binom = TRUE)
}

tmp <- tmp %>%
  ## select(name, ends_with("_cal")) %>%
  rename(Conflito = name) %>%
  pivot_longer(-Conflito) %>%
  pivot_wider(names_from=Conflito, values_from=value) %>%
  rename(ISO = name)

df <- df %>%
  left_join(tmp)

data.table::fwrite(df, './clean/full_distancias_calibradas.csv')
#+end_src

#+RESULTS:
:results:
:end:

** Calibrando outras variÃ¡veis

Tal como para os conflitos, serÃ¡ utilizado o mÃ©todo indireto.
Diferentemente dos conflitos, o cÃ¡lculo serÃ¡ feito entre paÃ­ses.

#+begin_src R
data.table::fread('./clean/full_distancias_calibradas.csv') -> df

tmp <- df %>%
  select(
    ISO,
    ## Diff,
    pc,
    decentralized
  ) %>%
  as.data.frame()

for(variable in names(tmp)[-1]){
  x <- tmp[variable] %>% as.vector() %>% t()
  # Find quantiles
  quant <- quantile(x, probs = seq(0, 1, 0.2))

  # Theoretical calibration
  x_cal <- NA
  x_cal[x <= quant[1]] <- 0
  x_cal[x > quant[1] & x <= quant[2]] <- .2
  x_cal[x > quant[2] & x <= quant[3]] <- .4
  x_cal[x > quant[3] & x <= quant[4]] <- .6
  x_cal[x > quant[4] & x <= quant[5]] <- .8
  x_cal[x > quant[5]] <- 1

  tmp[variable] <- indirectCalibration(x %>% as.vector(), x_cal, binom = TRUE)
}

tmp <- tmp %>%
  rename_with(.cols = -ISO, .fn = ~ paste0(.x, "_cal"))

diff_cal <- calibrate(
  x = df$Diff %>% as.vector(),
  thresholds = "e=-0.6, c=-0.00001, i=0.6"
)

df <- df %>%
  mutate(Diff_cal = diff_cal) %>%
  left_join(tmp)

data.table::fwrite(df, './clean/raw_calibrados.csv')
data.table::fwrite(
              df %>% select(ISO,  ends_with("_cal")),
              './clean/calibrados.csv')
#+end_src

#+RESULTS:
:results:
Joining, by = "ISO"
:end:


* Tabela verdade e minimizaÃ§Ã£o

** Maior concentraÃ§Ã£o (1989 - 1945 > 0)

*** Tabela verdade

#+begin_src R :results output html table
df <- data.table::fread('./clean/calibrados.csv') %>% as.data.frame()

df <- df %>%
  set_names(
    ~ str_to_upper(.) %>%
                  str_replace_all("_CAL", "") %>%
                  str_replace_all("VIOLENTOS", "V") %>%
                  str_replace_all("AFRICA", "AFR") %>%
                  str_replace_all("AMERICAS", "AME") %>%
                  str_replace_all("EUROPA", "EUR") %>%
                  str_replace_all("NAO", "N")
  ) %>%
  rename(DEC = DECENTRALIZED)

conds <- df %>%
  select(-c(DIFF, V, NV, ISO)) %>%
  select(-c(starts_with("N"))) %>%
  names() %>%
  as.vector()

TT <- truthTable(
  data = df,
  outcome = "DIFF",
  conditions = conds,
  complete = TRUE,
  show.cases = TRUE,
  incl.cut = 0.8,
  sort.by = "out, incl"
)

stargazerTT(TT, show.cases = TRUE, type = "html")
#+end_src

#+RESULTS:
#+begin_export html

<table style="text-align:center"><tr><td colspan="12" style="border-bottom: 1px solid black"></td></tr><tr><td style="text-align:left"></td><td>V_EUR</td><td>V_ASIA</td><td>V_AFR</td><td>V_AME</td><td>PC</td><td>DEC</td><td>OUT</td><td>n</td><td>incl</td><td>PRI</td><td>cases</td></tr>
<tr><td colspan="12" style="border-bottom: 1px solid black"></td></tr><tr><td style="text-align:left">52</td><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>12</td></tr>
<tr><td style="text-align:left">44</td><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td><td>0.881</td><td>0.364</td><td>8</td></tr>
<tr><td style="text-align:left">46</td><td>1</td><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td><td>1</td><td>2</td><td>0.846</td><td>0.618</td><td>2,18</td></tr>
<tr><td style="text-align:left">42</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>3</td><td>0.732</td><td>0.553</td><td>4,9,10</td></tr>
<tr><td style="text-align:left">43</td><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>5</td><td>0.612</td><td>0.299</td><td>5,11,13,16,17</td></tr>
<tr><td style="text-align:left">41</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>4</td><td>0.561</td><td>0.178</td><td>3,6,7,14</td></tr>
<tr><td style="text-align:left">18</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0.510</td><td>0.276</td><td>1</td></tr>
<tr><td style="text-align:left">21</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0.391</td><td>0</td><td>15</td></tr>
<tr><td style="text-align:left">1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">2</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">3</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">4</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">5</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">6</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">7</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">8</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">9</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">10</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">11</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">12</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">13</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">14</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">15</td><td>0</td><td>0</td><td>1</td><td>1</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">16</td><td>0</td><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">17</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">19</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">20</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">22</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">23</td><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">24</td><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">25</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">26</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">27</td><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">28</td><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">29</td><td>0</td><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">30</td><td>0</td><td>1</td><td>1</td><td>1</td><td>0</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">31</td><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">32</td><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">33</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">34</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">35</td><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">36</td><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">37</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">38</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">39</td><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">40</td><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">45</td><td>1</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">47</td><td>1</td><td>0</td><td>1</td><td>1</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">48</td><td>1</td><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">49</td><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">50</td><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">51</td><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">53</td><td>1</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">54</td><td>1</td><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">55</td><td>1</td><td>1</td><td>0</td><td>1</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">56</td><td>1</td><td>1</td><td>0</td><td>1</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">57</td><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">58</td><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">59</td><td>1</td><td>1</td><td>1</td><td>0</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">60</td><td>1</td><td>1</td><td>1</td><td>0</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">61</td><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">62</td><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">63</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">64</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td colspan="12" style="border-bottom: 1px solid black"></td></tr></table>
#+end_export

*** SoluÃ§Ã£o conservadora

#+begin_src R :results output html table
MIN <- minimize(TT)

stargazerSol(MIN, type = "html", outcome = "DIFF", show.cases = TRUE)
#+end_src

#+RESULTS:
#+begin_export html

<table style="text-align:center"><tr><td colspan="6" style="border-bottom: 1px solid black"></td></tr><tr><td style="text-align:left"></td><td>inclS</td><td>PRI</td><td>covS</td><td>covU</td><td>cases</td></tr>
<tr><td colspan="6" style="border-bottom: 1px solid black"></td></tr><tr><td style="text-align:left">V_EUR* ~ V_ASIA* V_AFR* ~ V_AME* PC* DEC</td><td>0.881</td><td>0.364</td><td>0.118</td><td>0.055</td><td>8</td></tr>
<tr><td style="text-align:left">V_EUR* V_ASIA* ~ V_AFR* ~ V_AME* PC* DEC</td><td>1</td><td>1</td><td>0.130</td><td>0.094</td><td>12</td></tr>
<tr><td style="text-align:left">V_EUR* ~ V_ASIA* V_AFR* V_AME* ~ PC* DEC</td><td>0.846</td><td>0.618</td><td>0.267</td><td>0.213</td><td>2,18</td></tr>
<tr><td style="text-align:left">Solution</td><td>0.869</td><td>0.716</td><td>0.426</td><td></td><td></td></tr>
<tr><td colspan="6" style="border-bottom: 1px solid black"></td></tr></table>
#+end_export

*** SoluÃ§Ã£o parsimoniosa

#+begin_src R :results output html table
MIN <- minimize(TT, include = "?")

stargazerSol(MIN, type = "html", outcome = "DIFF", show.cases = TRUE)
#+end_src

#+RESULTS:
#+begin_export html

<table style="text-align:center"><tr><td colspan="6" style="border-bottom: 1px solid black"></td></tr><tr><td style="text-align:left"></td><td>inclS</td><td>PRI</td><td>covS</td><td>covU</td><td>cases</td></tr>
<tr><td colspan="6" style="border-bottom: 1px solid black"></td></tr><tr><td style="text-align:left">V_EUR* V_AME</td><td>0.744</td><td>0.390</td><td>0.657</td><td>0</td><td>2,18</td></tr>
<tr><td style="text-align:left">PC* DEC</td><td>0.941</td><td>0.883</td><td>0.256</td><td>0.109</td><td>8; 12</td></tr>
<tr><td style="text-align:left">Solution</td><td>0.705</td><td>0.426</td><td>0.771</td><td></td><td></td></tr>
<tr><td colspan="6" style="border-bottom: 1px solid black"></td></tr></table>
#+end_export




** Menor concentraÃ§Ã£o (1989 - 1945 < 0)
*** Tabela verdade

#+begin_src R :results output html table
df <- data.table::fread('./clean/calibrados.csv') %>% as.data.frame()

df <- df %>%
  set_names(
    ~ str_to_upper(.) %>%
                  str_replace_all("_CAL", "") %>%
                  str_replace_all("VIOLENTOS", "V") %>%
                  str_replace_all("AFRICA", "AFR") %>%
                  str_replace_all("AMERICAS", "AME") %>%
                  str_replace_all("EUROPA", "EUR") %>%
                  str_replace_all("NAO", "N")
  ) %>%
  rename(DEC = DECENTRALIZED)

conds <- df %>%  select(-c(DIFF, V, NV, ISO)) %>%
  select(-c(starts_with("N"))) %>%
  names() %>%
  as.vector()

TT <- truthTable(
  data = df,
  outcome = "~DIFF",
  conditions = conds,
  complete = TRUE,
  show.cases = TRUE,
  incl.cut = 0.8,
  sort.by = "out, incl"
)

stargazerTT(TT, show.cases = TRUE, type = "html")
#+end_src

#+RESULTS:
#+begin_export html

<table style="text-align:center"><tr><td colspan="12" style="border-bottom: 1px solid black"></td></tr><tr><td style="text-align:left"></td><td>V_EUR</td><td>V_ASIA</td><td>V_AFR</td><td>V_AME</td><td>PC</td><td>DEC</td><td>OUT</td><td>n</td><td>incl</td><td>PRI</td><td>cases</td></tr>
<tr><td colspan="12" style="border-bottom: 1px solid black"></td></tr><tr><td style="text-align:left">21</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0.971</td><td>0.953</td><td>15</td></tr>
<tr><td style="text-align:left">41</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td><td>4</td><td>0.890</td><td>0.794</td><td>3,6,7,14</td></tr>
<tr><td style="text-align:left">44</td><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td><td>0.851</td><td>0.201</td><td>8</td></tr>
<tr><td style="text-align:left">43</td><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td><td>5</td><td>0.834</td><td>0.701</td><td>5,11,13,16,17</td></tr>
<tr><td style="text-align:left">18</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>1</td><td>0.813</td><td>0.724</td><td>1</td></tr>
<tr><td style="text-align:left">46</td><td>1</td><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td><td>0</td><td>2</td><td>0.701</td><td>0.256</td><td>2,18</td></tr>
<tr><td style="text-align:left">42</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>3</td><td>0.669</td><td>0.447</td><td>4,9,10</td></tr>
<tr><td style="text-align:left">52</td><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td><td>0.355</td><td>0</td><td>12</td></tr>
<tr><td style="text-align:left">1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">2</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">3</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">4</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">5</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">6</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">7</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">8</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">9</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">10</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">11</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">12</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">13</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">14</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">15</td><td>0</td><td>0</td><td>1</td><td>1</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">16</td><td>0</td><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">17</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">19</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">20</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">22</td><td>0</td><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">23</td><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">24</td><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">25</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">26</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">27</td><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">28</td><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">29</td><td>0</td><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">30</td><td>0</td><td>1</td><td>1</td><td>1</td><td>0</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">31</td><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">32</td><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">33</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">34</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">35</td><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">36</td><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">37</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">38</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">39</td><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">40</td><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">45</td><td>1</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">47</td><td>1</td><td>0</td><td>1</td><td>1</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">48</td><td>1</td><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">49</td><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">50</td><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">51</td><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">53</td><td>1</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">54</td><td>1</td><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">55</td><td>1</td><td>1</td><td>0</td><td>1</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">56</td><td>1</td><td>1</td><td>0</td><td>1</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">57</td><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">58</td><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">59</td><td>1</td><td>1</td><td>1</td><td>0</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">60</td><td>1</td><td>1</td><td>1</td><td>0</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">61</td><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">62</td><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">63</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td style="text-align:left">64</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>?</td><td>0</td><td></td><td></td><td></td></tr>
<tr><td colspan="12" style="border-bottom: 1px solid black"></td></tr></table>
#+end_export

*** SoluÃ§Ã£o conservadora

#+begin_src R :results output html table
MIN <- minimize(TT)

stargazerSol(MIN, type = "html", outcome = "~DIFF", show.cases = TRUE)
#+end_src

#+RESULTS:
#+begin_export html

<table style="text-align:center"><tr><td colspan="6" style="border-bottom: 1px solid black"></td></tr><tr><td style="text-align:left"></td><td>inclS</td><td>PRI</td><td>covS</td><td>covU</td><td>cases</td></tr>
<tr><td colspan="6" style="border-bottom: 1px solid black"></td></tr><tr><td style="text-align:left">V_EUR* ~ V_ASIA* V_AFR* ~ V_AME* PC</td><td>0.820</td><td>0.674</td><td>0.353</td><td>0.017</td><td>5,11,13,16,17; 8</td></tr>
<tr><td style="text-align:left">V_EUR* ~ V_ASIA* V_AFR* ~ V_AME* ~ DEC</td><td>0.850</td><td>0.748</td><td>0.551</td><td>0.215</td><td>3,6,7,14; 5,11,13,16,17</td></tr>
<tr><td style="text-align:left">~ V_EUR* V_ASIA* ~ V_AFR* ~ V_AME* ~ PC* DEC</td><td>0.813</td><td>0.724</td><td>0.058</td><td>0.019</td><td>1</td></tr>
<tr><td style="text-align:left">~ V_EUR* V_ASIA* ~ V_AFR* V_AME* ~ PC* ~ DEC</td><td>0.971</td><td>0.953</td><td>0.114</td><td>0.068</td><td>15</td></tr>
<tr><td style="text-align:left">Solution</td><td>0.847</td><td>0.752</td><td>0.693</td><td></td><td></td></tr>
<tr><td colspan="6" style="border-bottom: 1px solid black"></td></tr></table>
#+end_export

*** SoluÃ§Ã£o parsimoniosa

#+begin_src R :results output html table
MIN <- minimize(TT, include = "?")

stargazerSol(MIN, type = "html", outcome = "~DIFF", show.cases = TRUE)
#+end_src

#+RESULTS:
#+begin_export html

<table style="text-align:center"><tr><td colspan="6" style="border-bottom: 1px solid black"></td></tr><tr><td style="text-align:left"></td><td>inclS</td><td>PRI</td><td>covS</td><td>covU</td><td>cases</td></tr>
<tr><td colspan="6" style="border-bottom: 1px solid black"></td></tr><tr><td style="text-align:left">~ V_EUR</td><td>0.846</td><td>0.742</td><td>0.198</td><td>0</td><td>1; 15</td></tr>
<tr><td style="text-align:left">~ DEC</td><td>0.731</td><td>0.631</td><td>0.805</td><td>0.158</td><td>15; 3,6,7,14; 5,11,13,16,17</td></tr>
<tr><td style="text-align:left">~ V_ASIA* PC</td><td>0.807</td><td>0.647</td><td>0.365</td><td>0</td><td>5,11,13,16,17; 8</td></tr>
<tr><td style="text-align:left">Solution</td><td>0.702</td><td>0.586</td><td>0.939</td><td></td><td></td></tr>
<tr><td colspan="6" style="border-bottom: 1px solid black"></td></tr></table>
#+end_export

* TODOs


** TODO Conferir NAs da base
- [ ] Como preencher se forem faltantes

** TODO Decidir se as medidas de centralidade sÃ£o sempre as mÃ©dias
